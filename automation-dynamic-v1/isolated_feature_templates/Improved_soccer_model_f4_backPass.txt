// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends 
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the higher chance of scoring during an attack
/*

0	https://www.premierleague.com/match/12313	4-4-2	Crystal Palace	0	3	Chelsea	4-2-3-1

Actual Result : Chelsea Won
Our result: ?

case 1 (Home) (CP)
 --
Formation - 4-4-2 - (C,R,CR,CL,L,R,CR,CL,L,CR,CL)
---
GK: W. Hennessey - OA:  Reflex: 72, Diving: 72
Def:
Joel Ward - OverallRating: 76, LongPass: 72, ShortPass: 77, MentalityAggression: 74, MentalityInterception: 77, SlidingTackle:78, StandingTackle : 80  
Scott Dann - 


case 2 (Away) (Chelsea)
 --
Formation - 4-2-3-1 - (C,R,CR,CL,L,CR,CL,RL,C,LR,C)
---


*/

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;

// Foul probability
// will get dynamically adjust according to the ball position
var X = 0;

// Penalty probability
// will get dynamically adjust according to the keeper & penalty taker
var PS = 0;
var PF = 0;

var defAtkLineFoulCount = 0; 
var defMidLineFoulCount = 0; 
var defDefLineFoulCount = 0;

// dynamic cal in python
// avg(diving + reflex rating of opp keeper)
// 84 | 88 = > 86
#define defKeeperSaveRating {{awayTeamKeeperSaveRating}};

// dynamic cal in python
// max(all atk players penalty rating)
// i.e. considering the best penalty taker will always take the penalty
#define atkForPenaltyRating {{homeTeamPenaltyRating}};

// dynamic cal in python
// max(all atk players freekick rating)
// i.e. considering the best free kick taker will always take the freekick
#define atkForFreeKickRating {{homeTeamFreeKickRating}};

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

//// backward pass limit to prevent deadlock
//#define backwardPassCountLimit 20;
//var backwardPassCount = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, and Header
enum {SP, LP, LS, FI, VO, HD};

// Attack Line, Mid Line, Defense Line
enum {AL, ML, DL};

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position
// 4-4-2
var atkKepPos = [-1(6), {{formationAttGK}}, -1(6)];
var atkDefPos = [-1(6), {{formationAttDL}}, -1(6)];
var atkMidPos = [-1(6), {{formationAttML}}, -1(6)];
var atkForPos = [-1(6), {{formationAttFL}}, -1(6)];
var defKepPos = [-1(6), {{formationDefGK}}, -1(6)];

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player 
// The gurad only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player
AtkKep = {{homeGkCodeLine}};

// Here for the defenders, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose, avg agression rating the ball respectively 
// The prob. to lose the ball for the attacking team's defenders was calculated based on the defending team forward's player ratings 
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards
// In particular, the probability of getting foul was a weighted combination of the agression FIFA player ratings of the defending team forward players
AtkDef = {{homeDefCodeLine}};

// Similar to defenders, midfielders and forwards have their own specific parameters
//longpass,shortpass and longshort
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. of getting foul for the attacking team's midfielders is based on the defending team's midfielders
AtkMid = {{homeMidCodeLine}};

// shortpass, longpass
// attackingfinish,longshot,volley,header,
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders
// The prob. of getting foul for the attacking team's forwards is based on the defending team's defenders
AtkFor = {{homeAttkCodeLine}};

///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defenders, midfielders and forwards are already implicitly "defending" via the prob. to lose the ball parameter
// avg of gk diving & gk reflex to see gk rating be able to save a goal
DefKep = {{awayGkCodeLine}};

///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

// Keeper can't make backward passes
Kep_1(i, j, p) = [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortForwardPass -> pcase {
	i: pass -> UpdatePos(p, SP); AtkDef
	100-i: intercepted{danger = 5;} -> Skip
} [] [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longForwardPass -> pcase {
	j: pass -> UpdatePos(p, LP); AtkDef
	100-j: intercepted{danger = 5;} -> Skip
};

// can make forward & backward passes
Def(i, j, k, l, p) = [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]shortForwardPass -> pcase {
	i: pass{inAir = false;} -> UpdatePos(p, SP); AtkMid
	k: tackled{danger = 4;} -> CheckFoul(p, l, DL)
} [] [atkKepPos[p-2] == 1 || atkKepPos[p-1] == 1 || atkKepPos[p] == 1 || atkKepPos[p+1] == 1 || atkKepPos[p+2] == 1]shortBackwardPass -> pcase {
	i: pass{inAir = false;} -> UpdatePos(p, SP); AtkKep
	k: tackled{danger = 4;} -> CheckFoul(p, l, DL)
} [] [atkMidPos[p-6] == 1 || atkMidPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1]longForwardPass -> pcase {
	j: pass{inAir = true;} -> UpdatePos(p, LP); AtkMid
	k: tackled{danger = 4;} -> CheckFoul(p, l, DL)
} [] [atkKepPos[p-6] == 1 || atkKepPos[p-5] == 1 || atkKepPos[p-4] == 1 || atkKepPos[p-3] == 1 || atkKepPos[p+3] == 1 || atkKepPos[p+4] == 1 || atkKepPos[p+5] == 1 || atkKepPos[p+6] == 1]longBackwardPass -> pcase {
	j: pass{inAir = true;} -> UpdatePos(p, LP); AtkKep
	k: tackled{danger = 4;} -> CheckFoul(p, l, DL)
};

// can make only backward passes but can take forward shoot/finish but not pass
Mid(i, j, k, l, m, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortForwardPass -> pcase {
	i: pass{inAir = false;} -> UpdatePos(p, SP); AtkFor
	l: tackled{danger = 3;} -> CheckFoul(p, m, ML)
} [] [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortBackwardPass -> pcase {
	i: pass{inAir = false;} -> UpdatePos(p, SP); AtkDef
	l: tackled{danger = 3;} -> CheckFoul(p, m, ML)
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longForwardPass -> pcase {
	j: pass{inAir = true;} ->  UpdatePos(p, LP); AtkFor
	l: tackled{danger = 3;} -> CheckFoul(p, m, ML)
} [] [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longBackwardPass -> pcase {
	j: pass{inAir = true;} ->  UpdatePos(p, LP); AtkDef
	l: tackled{danger = 3;} -> CheckFoul(p, m, ML)
} [] [defKepPos[C] == 1]longShot -> pcase {
	k: shoot -> UpdatePos(p, LS); DefKep
	l: tackled{danger = 3;} -> CheckFoul(p, m, ML)
};

For(sp, lp, i, j, k, l, m, n, p) = [atkMidPos[p-2] == 1 || atkMidPos[p-1] == 1 || atkMidPos[p] == 1 || atkMidPos[p+1] == 1 || atkMidPos[p+2] == 1]shortBackwardPass -> pcase {
	sp: pass{inAir = false;} -> UpdatePos(p, SP); AtkMid
	m: tackled{danger = 2;} -> CheckFoul(p, n, AL)
} [] [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkMidPos[p-4] == 1 || atkMidPos[p-3] == 1 || atkMidPos[p+3] == 1 || atkMidPos[p+4] == 1 || atkMidPos[p+5] == 1 || atkMidPos[p+6] == 1]longBackwardPass -> pcase {
	lp: pass{inAir = true;} ->  UpdatePos(p, LP); AtkMid
	m: tackled{danger = 2;} -> CheckFoul(p, n, AL)
} [] [defKepPos[C] == 1]finish -> pcase {
	i: shoot -> UpdatePos(p, FI); DefKep
	m: tackled{danger = 2;} -> CheckFoul(p, n, AL)
} [] [defKepPos[C] == 1]longShot -> pcase {
	j: shoot -> UpdatePos(p, LS); DefKep
	m: tackled{danger = 2;} -> CheckFoul(p, n, AL)
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	k: shoot -> UpdatePos(p, VO); DefKep
	m: tackled{danger = 2;} -> CheckFoul(p, n, AL)
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	l: shoot -> UpdatePos(p, HD); DefKep
	m: tackled{danger = 2;} -> CheckFoul(p, n, AL)
};

Kep_2(i, p) = attemptSave -> pcase {
	i: save{danger = 1;} -> Skip
	100-i: concede -> Skip
};

FreeKick() = takeFreekick -> pcase{
	defKeeperSaveRating: save{danger = 1;} -> Skip
	atkForFreeKickRating: freekickGoal{danger = 0;} -> Skip
};

Penalty_Shot(i, j) = shot -> CalPenaltyProbability(i, j); pcase {
	PS: success{danger = 0;} -> Skip
	PF: saved{danger = 1;} -> Skip
};

// this can be done here or python automation script
// i = max(penality rating of atk team) , j = opp keeper avg(diving + reflex ratings)
CalPenaltyProbability(i, j) = case {
    i-j > 10: updateProb{PS = 70; PF = 30;} -> Skip
    i-j >= 5: updateProb{PS = 60; PF = 40;} -> Skip
    i-j >= 0: updateProb{PS = 50; PF = 50;} -> Skip
    i-j >= -5: updateProb{PS = 40; PF = 60;} -> Skip
    i-j >= -10: updateProb{PS = 30; PF = 70;} -> Skip
};

// i = max(penality rating of atk team) , j = opp keeper avg(diving + reflex ratings)
CalFoulTackelProbability(a) = case {
    a > 90: updateProb{X = 50;} -> Skip
    a >= 70: updateProb{X = 30;} -> Skip
    a >= 50: updateProb{X = 20;} -> Skip
    a >= 30: updateProb{X = 10;} -> Skip
};

CheckFoul(p, a, l) = CalFoulTackelProbability(a); pcase {
	X: case{
		l == AL: countFoul{ defAtkLineFoulCount ++ } -> case {
			p == LR || p == CL || p == C || p == CR || p == RL : Penalty_Shot(atkForPenaltyRating, defKeeperSaveRating)
			default: FreeKick()
		}
		l == ML: countFoul{ defMidLineFoulCount ++ } -> FreeKick()
		l == DL: countFoul{ defDefLineFoulCount ++ } -> Skip
	}
	100 - X: Skip
};

UpdatePos(p, e) = case {
	p == L: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == CL: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}	
	p == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
#assert AtkKep deadlockfree;
#assert AtkKep |= F G Goal0 with prob;
#assert AtkKep |= F G Goal1 with prob;
#assert AtkKep |= F G Goal2 with prob;
#assert AtkKep |= F G Goal3 with prob;
#assert AtkKep |= F G Goal4 with prob;