// NOTE: This will only produce probabilities of goal when the away team attacks while the home team defends 
// A similar pcsp file will have to be generated from the home team POV to meaningfully compare which team has the higher chance of scoring during an attack

// Position of players in grid
// Left, LeftRight, and CenterLeft etc.
#define L 6;
#define LR 7;
#define CL 8;
#define C 9;
#define CR 10;
#define RL 11;
#define R 12;
#define X 10; // Faul probability
#define PS 10; // Chance of penalty shot succeeding

// Grid of eligible positions that can receive the ball
// This will change based on the previous position and the action taken
// 1 means the position is eligible to receive the ball
// 0 means the position is not eligible to receive the ball
// See Individual Positions section for more info
var pos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

// If the ball is in the air
var inAir = false;

// Danger level for the attacking team
// The lower the value, the lesser the danger
var danger = 0;

// Actions based on FIFA player ratings
// ShortPass, LongPass, LongShot, Finishing, Volley, and Header
enum {SP, LP, LS, FI, VO, HD};
enum {DEF, ATT}; //Defense or attack team
enum {ATKKEPPOS, DEFKEPPOS, OTHER};

// Match URL: https://www.premierleague.com/match/12115

// Soccer field grid
// 1 means there is a player in that position
// 0 means there is no player in that position

// Midfielders consist of 2 lines --> atkMidbwd and atkMidFwd
var atkKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];
var atkDefPos = [-1(6), 1, 0, 1, 0, 1, 0, 1, -1(6)];
var atkMidBwdPos = [-1(6), 0, 0, 1, 0, 1, 0, 0, -1(6)]; 
var atkMidFwdPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var atkForPos = [-1(6), 0, 1, 0, 1, 0, 1, 0, -1(6)];
var defKepPos = [-1(6), 0, 0, 0, 1, 0, 0, 0, -1(6)];

///////////// AWAY TEAM PLAYERS (Attacking Team) /////////////
// The parameters represent the probabilities specific to the player 
// The gurad only allows eligible players to get the ball, see Individual Positions section for more info

// For example keepers can only ShortPass or LongPass
// Here 64, 64 represents the FIFA ShortPass and LongPass ratings for this particular player
AtkKep = [pos[C] == 1]Kep_1({{ShortPass_AtkKep}}, {{LongPass_DefKep}}, {{Mental_DefKep}}, C);

// Here for the defenders, the first 3 parameters are with respect to the ShortPass, LongPass, and prob. to lose the ball respectively 
// The prob. to lose the ball for the attacking team's defenders was calculated based on the defending team forward's player ratings 
// In particular, the probability to lose the ball was a weighted combination of the standing tackle, sliding tackle, and interception FIFA player ratings of the forwards
AtkDef = [pos[R] == 1]Def({{ShortPass_AtkDef_r}}, {{LongPass_AtkDef_r}}, {{BallLosePass_AtkDef_r}}, {{Mental_AtkDef_r}}, R) [] [pos[CR] == 1]Def({{ShortPass_AtkDef_cr}}, {{LongPass_AtkDef_cr}}, {{BallLosePass_AtkDef_cr}}, {{Mental_AtkDef_cr}}, CR) [] [pos[CL] == 1]Def({{ShortPass_AtkDef_cl}}, {{LongPass_AtkDef_cl}}, {{BallLosePass_AtkDef_cl}}, {{Mental_AtkDef_cl}}, CL) [] [pos[L] == 1]Def({{ShortPass_AtkDef_l}}, {{LongPass_AtkDef_l}}, {{BallLosePass_AtkDef_l}}, {{Mental_AtkDef_l}}, L);

// Similar to defenders, midfielders and forwards have their own specific parameters
// See their processes below for more information on what those parameters are
// The prob. to lose for the attacking team's midfielders is based on the defending team's midfielders
// The prob. to lose for the attacking team's forwards is based on the defending team's defenders

AtkMidBwd = [pos[CL] == 1]Mid({{ShortPass_AtkMidBwd_cl}}, {{LongPass_AtkMidBwd_cl}}, {{LongShot_AtkMidBwd_cl}}, {{LoseBall_AtkMidBwd_cl}}, {{Mental_AtkMidBwd_cl}}, CL) [] [pos[CR] == 1]Mid({{ShortPass_AtkMidBwd_cr}}, {{LongPass_AtkMidBwd_cr}}, {{LongShot_AtkMidBwd_cr}}, {{LoseBall_AtkMidBwd_cl}}, {{Mental_AtkMidBwd_cr}}, CR);
AtkMidFwd = [pos[RL] == 1]Mid({{ShortPass_AtkMidFwd_rl}}, {{LongPass_AtkMidFwd_rl}}, {{LongShot_AtkMidFwd_rl}}, {{LoseBall_AtkMidFwd_rl}}, {{Mental_AtkMidFwd_rl}}, RL) [] [pos[C] == 1]Mid({{ShortPass_AtkMidFwd_c}}, {{LongPass_AtkMidFwd_c}}, {{LongShot_AtkMidFwd_c}}, {{LoseBall_AtkMidFwd_c}}, {{Mental_AtkMidFwd_c}}, C) [] [pos[LR] == 1]Mid({{ShortPass_AtkMidFwd_lr}}, {{LongPass_AtkMidFwd_lr}}, {{LongShot_AtkMidFwd_lr}}, {{LoseBall_AtkMidFwd_lr}}, {{Mental_AtkMidFwd_lr}}, LR);
AtkMid = [pos[RL] == 1]Mid({{ShortPass_AtkMid_rl}}, {{LongPass_AtkMid_rl}}, {{LongShot_AtkMid_rl}}, {{LoseBall_AtkMid_rl}}, {{Mental_AtkMid_rl}}, RL) [] [pos[C] == 1]Mid({{ShortPass_AtkMid_c}}, {{LongPass_AtkMid_c}}, {{LongShot_AtkMid_c}}, {{LoseBall_AtkMid_c}}, {{Mental_AtkMid_c}}, C) [] [pos[LR] == 1]Mid({{ShortPass_AtkMid_lr}}, {{LongPass_AtkMid_lr}}, {{LongShot_AtkMid_lr}}, {{LoseBall_AtkMid_lr}}, {{Mental_AtkMid_lr}},LR);
AtkFor = [pos[RL] == 1]For({{Fin_AtkFor_RL}}, {{LongShot_AtkFor_RL}}, {{Volley_AtkFor_RL}}, {{Heading_AtkFor_RL}}, {{LoseBall_AtkFor_RL}}, {{Mental_AtkFor_RL}}, RL) [] [pos[C] == 1]For({{Fin_AtkFor_C}}, {{LongShot_AtkFor_C}}, {{Volley_AtkFor_C}}, {{Heading_AtkFor_C}}, {{LoseBall_AtkFor_C}}, {{Mental_AtkFor_C}},C) [] [pos[LR] == 1]For({{Fin_AtkFor_LR}}, {{LongShot_AtkFor_LR}}, {{Volley_AtkFor_LR}}, {{Heading_AtkFor_LR}}, {{LoseBall_AtkFor_LR}}, {{Mental_AtkFor_LR}}, LR);

///////////// HOME TEAM PLAYERS (Defending Team) /////////////
// Home team defenders, midfielders and forwards are already implicitly "defending" via the prob. to lose the ball parameter
DefKep = [pos[C] == 1]Kep_2({{Save_DefKep}}, {{Mental_DefKep}}, C);

///////////// Individual Positions /////////////
// There is a guard to every action (e.g., shortPass) a player can take
// The guard makes sure that there are players eligible to receive the ball should that action happen
// Furthermore, based on the type of action taken, only some players will be eligible to receive the ball
// E.g., If a defender at L does a shortPass, the midfielder at R should not be able to receive it
// The eligible players are updated with UpdatePos

Kep_1(i, j, f, p) = [atkDefPos[p-2] == 1 || atkDefPos[p-1] == 1 || atkDefPos[p] == 1 || atkDefPos[p+1] == 1 || atkDefPos[p+2] == 1]shortPass -> pcase {
	i-f: pass -> UpdatePos(p, SP); AtkDef
	f: Foul(PS, DEF, ATKKEPPOS)
	100-i: intercepted{danger = 5;} -> Skip
} [] [atkDefPos[p-6] == 1 || atkDefPos[p-5] == 1 || atkDefPos[p-4] == 1 || atkDefPos[p-3] == 1 || atkDefPos[p+3] == 1 || atkDefPos[p+4] == 1 || atkDefPos[p+5] == 1 || atkDefPos[p+6] == 1]longPass -> pcase {
	j-f: pass -> UpdatePos(p, LP); AtkDef
	f: Foul(PS, DEF, ATKKEPPOS)
	100-j: intercepted{danger = 5;} -> Skip
};

Def(i, j, k, f, p) = [atkMidBwdPos[p-2] == 1 || atkMidBwdPos[p-1] == 1 || atkMidBwdPos[p] == 1 || atkMidBwdPos[p+1] == 1 || atkMidBwdPos[p+2] == 1]shortPass -> pcase {
	i: pass -> UpdatePos(p, SP); AtkMid
	k: tackled{danger = 4;} -> Skip
	f: Foul(PS, DEF, OTHER)
} [] [atkMidBwdPos[p-6] == 1 || atkMidBwdPos[p-5] == 1 || atkMidBwdPos[p-4] == 1 || atkMidBwdPos[p-3] == 1 || atkMidBwdPos[p+3] == 1 || atkMidBwdPos[p+4] == 1 || atkMidBwdPos[p+5] == 1 || atkMidBwdPos[p+6] == 1]longPass -> pcase {
	j: pass -> UpdatePos(p, LP); AtkMid
	k: tackled{danger = 4;} -> Skip
	f: Foul(PS, DEF, OTHER)
};

Mid(i, j, k, l, f, p) = [atkForPos[p-2] == 1 || atkForPos[p-1] == 1 || atkForPos[p] == 1 || atkForPos[p+1] == 1 || atkForPos[p+2] == 1]shortPass -> pcase {
	i: pass -> UpdatePos(p, SP); AtkFor
	l: tackled{danger = 3;} -> Skip
	f: Foul(PS, DEF, OTHER)
} [] [atkForPos[p-6] == 1 || atkForPos[p-5] == 1 || atkForPos[p-4] == 1 || atkForPos[p-3] == 1 || atkForPos[p+3] == 1 || atkForPos[p+4] == 1 || atkForPos[p+5] == 1 || atkForPos[p+6] == 1]longPass -> pcase {
	j: pass{inAir = true;} -> UpdatePos(p, LP); AtkFor
	l: tackled{danger = 3;} -> Skip
	f: Foul(PS, DEF, OTHER)
} [] [defKepPos[C] == 1]longShot -> pcase {
	k: shoot -> UpdatePos(p, LS); DefKep
	l: tackled{danger = 3;} -> Skip
	f: Foul(PS, DEF, OTHER)
};


For(i, j, k, l, m, f, p) = [defKepPos[C] == 1]finish -> pcase {
	i: shoot -> UpdatePos(p, FI); DefKep
	m: tackled{danger = 2;} -> Skip
	f: Foul(PS, DEF, OTHER)
} [] [defKepPos[C] == 1]longShot -> pcase {
	j: shoot -> UpdatePos(p, LS); DefKep
	m: tackled{danger = 2;} -> Skip
	f: Foul(PS, DEF, OTHER)
} [] [defKepPos[C] == 1 && inAir == true]volley -> pcase {
	k: shoot -> UpdatePos(p, VO); DefKep
	m: tackled{danger = 2;} -> Skip
	f: Foul(PS, DEF, OTHER)
} [] [defKepPos[C] == 1 && inAir == true]header -> pcase {
	l: shoot -> UpdatePos(p, HD); DefKep
	m: tackled{danger = 2;} -> Skip
	f: Foul(PS, DEF, OTHER)
};

Kep_2(i, f, p) = attemptSave -> pcase {
	i-f: save{danger = 1;} -> Skip
	f: Foul(PS, ATT, DEFKEPPOS)
	100-i: concede -> Skip
};

Foul(i, team, p) = shot -> case { //p is the row position
	p == ATKKEPPOS: // Penalty Area
		Penalty_Shot(i, team)
	p == DEFKEPPOS: // Penalty Area
		Penalty_Shot(i, team)
};


Penalty_Shot(i, team) = shot -> 
case {
	team == DEF:
		pcase {
			i: success{danger--;} -> Skip
			100 - i : fail -> Skip
		}
	team == ATT:
		pcase {
			i: success{danger++;} -> Skip
			100 - i : fail -> Skip
		}
};

UpdatePos(p, e) = case {
	p == L: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == LR:
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == CL: 
		case {
			e == SP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 0; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 1; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == C:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 0;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 1;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}	
	p == CR:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 1; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 0; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	p == RL:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 0; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
	default:
		case {
			e == SP: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 0; pos[CR] = 1; pos[RL] = 1; pos[R] = 1;} -> Skip
			e == LP: {pos[L] = 1; pos[LR] = 1; pos[CL] = 1; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
			default: {pos[L] = 0; pos[LR] = 0; pos[CL] = 0; pos[C] = 1; pos[CR] = 0; pos[RL] = 0; pos[R] = 0;} -> Skip
		}
};

#define Goal0 danger <= 0;
#define Goal1 danger <= 1;
#define Goal2 danger <= 2;
#define Goal3 danger <= 3;
#define Goal4 danger <= 4;
#assert AtkKep deadlockfree;
#assert AtkKep |= F G Goal0 with prob;
#assert AtkKep |= F G Goal1 with prob;
#assert AtkKep |= F G Goal2 with prob;
#assert AtkKep |= F G Goal3 with prob;
#assert AtkKep |= F G Goal4 with prob;
